@page "/line-graph/{companyName}"
@using System.Globalization
@using eST1C.WebApp.Service
@inject LogServices LogServices
@inject LogDataService LogDataService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3 class="mb-4">Smart Torque Log File Records for <span class="text-primary">@companyName</span></h3>

<!-- Filter UI Start -->
<div class="mb-4" style="width: 377px;">
    <label for="filter-select" class="form-label">Select by Date, Week, or Month</label>
    <select class="form-select" id="filter-select" @onchange="HandleSelectChange">
        <option value="day" selected="@isDaySelected">Date</option>
        <option value="week" selected="@isWeekSelected">Week</option>
        <option value="month" selected="@isMonthSelected">Month</option>
    </select>
</div>

@if (isDaySelected)
{
    <div class="mb-4 row">
        <div style="width: 200px;">
            <label for="from-date" class="form-label">From</label>
            <input type="date" class="form-control" id="from-date" @bind="fromDate" />
        </div>
        <div style="width: 200px;">
            <label for="to-date" class="form-label">To</label>
            <input type="date" class="form-control" id="to-date" @bind="toDate" min="@fromDate.ToString("yyyy-MM-dd")"
                max="@GetMaxToDate()" />
        </div>
    </div>
}
else if (isWeekSelected)
{
    <div class="mb-4 row">
        <div class="col-md-3" style="width: 200px;">
            <label for="from-week" class="form-label">From</label>
            <input type="week" class="form-control" id="from-week" @bind="fromWeek" />
        </div>
        <div class="col-md-3" style="width: 200px;">
            <label for="to-week" class="form-label">To</label>
            <input type="week" class="form-control" id="to-week" @bind="toWeek" min="@fromWeek" max="@GetMaxToWeek()" />
        </div>
    </div>
}
else if (isMonthSelected)
{
    <div class="mb-4 row" >
        <div class="col-md-3" style="width: 200px;">
            <label for="from-month" class="form-label">From</label>
            <input type="month" class="form-control" id="from-month" @bind="fromMonth" />
        </div>
        <div class="col-md-3" style="width: 200px;">
            <label for="to-month" class="form-label">To</label>
            <input type="month" class="form-control" id="to-month" @bind="toMonth" min="@fromMonth.ToString("yyyy-MM")"
                max="@GetMaxToMonth()" />
        </div>
    </div>
}

<button class="btn btn-primary mb-3"   style="width: 377px;"@onclick="ApplyFilter">Apply Filter</button>

@if (!isFilterApplied)
{
   
}
else if (graphData == null || !graphData.Any())
{
    <!-- Display only after filter is applied and no logs are found -->
    <p class="text-danger">No data available.</p>
}
else
{

        <!-- Graph Rendering Start -->
        <div id="overlay-div" style="position: relative; z-index: 9999;">
    <!-- Content goes here -->

<div style="overflow-x: auto;">
    @foreach (var pcGroup in graphData.GroupBy(g => g.PCName))
    {
        
            <h5 class="text-primary md-5">@pcGroup.Key</h5>
                
           <RadzenChart LegendVisible="false" style="height: 200px; overflow: visible;">
    <RadzenChartTooltipOptions Shared="true" />

    <RadzenLineSeries Smooth="false" 
                      Data="@pcGroup" 
                      CategoryProperty="DateLabel" 
                      Title="@pcGroup.Key" 
                      ValueProperty="LogCount" 
                      LineType="LineType.Solid">

        <RadzenChartTooltipOptions Visible="true" />

        <RadzenMarkers Visible="true" MarkerType="MarkerType.Diamond" />
        <RadzenLegend Visible="false" />
        <RadzenSeriesDataLabels Visible="true" />

        <RadzenValueAxis>
            <RadzenAxisTitle Text="FREQUENCY" />
        </RadzenValueAxis>
        <RadzenCategoryAxis Visible="true">
            <RadzenAxisTitle Text="DATE RANGE" />
        </RadzenCategoryAxis>

    </RadzenLineSeries>
</RadzenChart>

    }
</div>
</div>
}
<!-- Graph Rendering End -->




    
@code {
    [Parameter]
    public string? companyName { get; set; }
    private bool isFilterApplied = false; // Indicates if filtering has been applied

    private List<LogGraphData> pcGroup = new List<LogGraphData>();

    private List<LogServices.LogDataDTO> logs = new List<LogServices.LogDataDTO>();
    private List<DateTime> dateRange = new List<DateTime>();
    private List<LogGraphData> graphData = new List<LogGraphData>(); // Data for the graph

    private DateTime fromDate = DateTime.Today;
    private DateTime toDate = DateTime.Today;
    private string fromWeek = DateTime.Today.ToString("yyyy-'W'ww");
    private string toWeek = DateTime.Today.ToString("yyyy-'W'ww");
    private DateTime fromMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private DateTime toMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);

    private bool isDaySelected = true;
    private bool isWeekSelected = false;
    private bool isMonthSelected = false;

    private string appliedFilterType = "day";

    private string GetMaxToDate() => fromDate.AddDays(30).ToString("yyyy-MM-dd");
    private string GetMaxToWeek() => GetFirstDateOfWeekISO8601(ParseWeekToDateTime(fromWeek)).AddDays(7 * 12).ToString("yyyy-'W'ww");
    private string GetMaxToMonth() => fromMonth.AddMonths(12).ToString("yyyy-MM");

    private async Task ApplyFilter()
    {
        if (isDaySelected) appliedFilterType = "day";
        else if (isWeekSelected) appliedFilterType = "week";
        else if (isMonthSelected) appliedFilterType = "month";

        if (isDaySelected)
        {
            dateRange = Enumerable.Range(0, (toDate - fromDate).Days + 1).Select(offset => fromDate.AddDays(offset)).ToList();
            logs = await LogServices.GetLogDataByDateRangeAsync(fromDate, toDate, companyName ?? string.Empty);
        }
        else if (isWeekSelected)
        {
            DateTime fromWeekDate = GetFirstDateOfWeekISO8601(ParseWeekToDateTime(fromWeek));
            DateTime toWeekDate = GetFirstDateOfWeekISO8601(ParseWeekToDateTime(toWeek));

            dateRange = Enumerable.Range(0, (toWeekDate - fromWeekDate).Days / 7 + 1)
                                  .Select(offset => fromWeekDate.AddDays(offset * 7)).ToList();

            logs = await LogServices.GetLogDataByWeekRangeAsync(fromWeekDate, toWeekDate, companyName ?? string.Empty);
        }
        else if (isMonthSelected)
        {
            dateRange = Enumerable.Range(0, ((toMonth.Year - fromMonth.Year) * 12) + toMonth.Month - fromMonth.Month + 1)
                                  .Select(offset => fromMonth.AddMonths(offset)).ToList();
            logs = await LogServices.GetLogDataByMonthRangeAsync(fromMonth, toMonth, companyName ?? string.Empty);
        }
         if (graphData == null || !graphData.Any())
    {
        Console.WriteLine("No logs found for the selected range."); // Debugging purpose
    }
    isFilterApplied = true; 
        logs = TransformToDailyLogs(logs);
        MapDataToGraph(); // Map the data for the graph
        StateHasChanged();
    }

    private List<LogServices.LogDataDTO> TransformToDailyLogs(List<LogServices.LogDataDTO> logData)
    {
        foreach (var log in logData)
        {
            foreach (var date in dateRange)
            {
                if (!log.DailyLogs.ContainsKey(date))
                {
                    log.DailyLogs[date] = 0;
                }
            }
        }
        return logData;
    }

    private void MapDataToGraph()
{
    graphData.Clear();
    foreach (var log in logs)
    {
        foreach (var date in dateRange)
        {
            // Format dates based on the applied filter
            string formattedDate = appliedFilterType switch
            {
                "week" => $"Week {CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday)} ({date.Year})",
                "month" => date.ToString("MMM yyyy"),
                _ => date.ToString("MM/dd/yyyy")  // Default to day format
            };

            graphData.Add(new LogGraphData
            {
                PCName = log.PCName,
                DateLabel = formattedDate,  // Use formatted date label
                LogCount = log.DailyLogs.TryGetValue(date, out var count) ? count : 0
            });
        }
    }
}


    private void HandleSelectChange(ChangeEventArgs e)
    {
        var selectedOption = e.Value?.ToString();
        isDaySelected = selectedOption == "day";
        isWeekSelected = selectedOption == "week";
        isMonthSelected = selectedOption == "month";
    }

    private DateTime ParseWeekToDateTime(string week)
    {
        try
        {
            var year = int.Parse(week.Substring(0, 4));
            var weekNumber = int.Parse(week.Substring(6, 2));

            var jan1 = new DateTime(year, 1, 1);
            int daysOffset = DayOfWeek.Monday - jan1.DayOfWeek;
            var firstWeekStart = jan1.AddDays(daysOffset);

            if (daysOffset > 0) firstWeekStart = firstWeekStart.AddDays(7);

            return firstWeekStart.AddDays((weekNumber - 1) * 7);
        }
        catch
        {
            return DateTime.Today;
        }
    }

    private DateTime GetFirstDateOfWeekISO8601(DateTime date)
    {
        var dayOfWeek = (int)date.DayOfWeek;
        var difference = dayOfWeek == 0 ? -6 : 1 - dayOfWeek;
        return date.AddDays(difference);
    }

    public class LogGraphData
    {
        public string PCName { get; set; }
        public DateTime Date { get; set; }
        public string DateLabel { get; set; } 
        public int LogCount { get; set; }
    }
    @* public partial class RadzenChart : RadzenComponent
    {

    } *@
 

}
