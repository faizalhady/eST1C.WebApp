@page "/quick-link/{Workcell}"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (showLoading)
{

    <div
        style="position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 9999;">
        <div class="spinner-border text-warning" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

<h3 class="text-primary" style="color: orange;">@Workcell</h3>
<div class="row justify-content-center mt-5">
    <div class="col-sm-3 col-md-3 col-lg-3 mb-4">
        <div class="card shadow-sm" @onclick="NavigateToTable" style="cursor: pointer;">
            <div class="card-body d-flex justify-content-center align-items-center">
                <p class="mb-0">Table</p>
            </div>
        </div>
    </div>

    <div class="col-sm-3 col-md-3 col-lg-3 mb-4">
        <div class="card text-center shadow-sm" @onclick="NavigateToLine" style="cursor: pointer;">
            <div class="card-body card-body d-flex justify-content-center align-items-center">
                <p class="mb-0"> Line Graph</p>
            </div>
        </div>
    </div>

    <div class="col-sm-3 col-md-3 col-lg-3 mb-4">
        <div class="card text-center shadow-sm" @onclick="NavigateToLast" style="cursor: pointer;">
            <div class="card-body d-flex justify-content-center align-items-center">
                <p class="mb-0">Last Used</p>
            </div>
        </div>
    </div>
    @* <div class="col-sm-3 col-md-3 col-lg-3 mb-4">
        <div class="card text-center shadow-sm" @onclick="NavigateToTest" style="cursor: pointer;">
            <div class="card-body d-flex justify-content-center align-items-center">
                <p class="mb-0">Test</p>
            </div>
        </div>
    </div> *@
</div>



@code {
    [Parameter]
    public string? Workcell { get; set; }

    private bool showLoading = false;

    private async Task NavigateToTable()
    {
        ShowLoading();
        await Task.Delay(200); // Simulate delay for testing
        NavigationManager.NavigateTo($"smarttorque-log/{Workcell}");
    }

    private async Task NavigateToLine()
    {
        ShowLoading();
        await Task.Delay(200); // Simulate delay for testing
        NavigationManager.NavigateTo($"line-graph/{Workcell}");
    }

    private async Task NavigateToLast()
    {
        ShowLoading();
        await Task.Delay(500); // Simulate delay for testing
        NavigationManager.NavigateTo($"smarttorque-last-used/{Workcell}");
    }
    private async Task NavigateToTest()
    {
        ShowLoading();
        await Task.Delay(500); // Simulate delay for testing
        NavigationManager.NavigateTo($"test2");
    }

    private void ShowLoading()
    {
        showLoading = true;
        StateHasChanged();
    }
}
